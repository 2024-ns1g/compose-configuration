events {
  worker_connections 1024;
}

http {
  # WebSocket のアップグレード用の変数設定
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  upstream api_main {
    server api:8080;
  }
  upstream api_aggregator {
    server api:8081;
  }
  upstream web_front {
    server web-front:80;
  }

  server {
    listen 80;
    server_name _;

    # /api/ のリクエスト用
    location /api/ {
      # CORS 用ヘッダーを付与
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
      add_header 'Access-Control-Allow-Headers' '*' always;

      # OPTIONS リクエストなら即座に 204 を返す
      if ($request_method = 'OPTIONS') {
        return 204;
      }

      # WebSocket 対応のための設定
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;

      proxy_pass http://api_main/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # /aggregator/ のリクエスト用
    location /aggregator/ {
      # CORS 用ヘッダーを付与
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
      add_header 'Access-Control-Allow-Headers' '*' always;

      if ($request_method = 'OPTIONS') {
        return 204;
      }

      # WebSocket 対応のための設定
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;

      proxy_pass http://api_aggregator/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # その他のリクエスト（Webフロント）用
    location / {
      # CORS 用ヘッダーを付与
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
      add_header 'Access-Control-Allow-Headers' '*' always;

      if ($request_method = 'OPTIONS') {
        return 204;
      }

      # WebSocket 対応のための設定
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;

      proxy_pass http://web_front/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_intercept_errors on;
      error_page 404 = /index.html;
    }

    # /index.html の直接アクセス用（必要ならば）
    location = /index.html {
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
      add_header 'Access-Control-Allow-Headers' '*' always;

      if ($request_method = 'OPTIONS') {
        return 204;
      }

      # WebSocket 対応のための設定
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;

      proxy_pass http://web_front/index.html;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }
}
