services:

  # Backend services

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      # - backend_db:/var/lib/postgresql/data
      - ./.data/postgres:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    volumes:
      # - backend_minio_data:/export
      # - backend_minio_config:/root/.minio
      - ./.data/minio/data:/export
      - ./.data/minio/config:/root/.minio
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server /export --console-address ":${MINIO_CONSOLE_PORT}"
    networks:
      - backend_network

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}) do
        echo '...waiting...' && sleep 1;
      done;
      /usr/bin/mc mb myminio/${MINIO_BUCKET_NAME};
      /usr/bin/mc policy download myminio/${MINIO_BUCKET_NAME};
      exit 0;
      "
    networks:
      - backend_network

  valkey:
    image: valkey/valkey:8
    volumes:
      # - backend_valkey:/data
      - ./.data/valkey:/data
    networks:
      - backend_network

  api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
      args:
        DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
    environment:
        DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
        VALKEY_HOST: ${VALKEY_HOST}
        VALKEY_PORT: ${VALKEY_PORT}
        MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
        MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
        PRIMARY_TOKEN_SECRET: ${BACKEND_PRIMARY_TOKEN_SECRET}
        SESSION_TOKEN_SECRET: ${BACKEND_SESSION_TOKEN_SECRET}
        # TODO: Add others
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_started
      createbuckets:
        condition: service_completed_successfully
    networks:
      - backend_network

  # Frontend

  web-front:
    build:
      context: ./web-front-v2
      dockerfile: Dockerfile
    networks:
      - frontend_network
      # - shared_network
    expose:
      - "3000:80"

  # Public

  nginx:
    image: nginx:latest
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - backend_network
      - frontend_network
    ports:
      - "${PUBLIC_PORT}:80"
    depends_on:
      - api
      - web-front

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
  # shared_network:
  #   driver: bridge

# volumes:
#   backend_db:
#   backend_minio_data:
#   backend_minio_config:
#   backend_valkey:
